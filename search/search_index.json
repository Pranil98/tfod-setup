{"config":{"lang":["en"],"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Configuration steps for TensorFlow object detection- STEP-1 Download the following content- Download v1.13.0 model. Download the ssd_mobilenet_v1_coco model from the model zoo or any other model of your choice from TensorFlow model zoo. Download Dataset & utils. Download labelImg tool for labeling images. before extraction, you should have the following compressed files - STEP-2 Extract all the above zip files into a tfod folder and remove the compressed files- Now you should have the following folders - STEP-3 Creating virtual env using conda- Commands for specific python version conda create -n your_env_name python=3.6 for latest python version conda activate your_env_name STEP-4 Install the following packages in your new environment- for GPU pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow-gpu==1.14.0 for CPU only pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow==1.14.0 STEP-5 Install protobuf using conda package manager- conda install -c anaconda protobuf STEP-6 For protobuff to .py conversion download from a tool from here- For windows -> download source for other versions and OS - click here Open command prompt and cd to research folder. Now in the research folder run the following command- For Linux or Mac protoc object_detection/protos/*.proto --python_out=. For Windows protoc object_detection/protos/*.proto --python_out=. STEP-7 Paste all content present in utils into research folder- Following are the files and folder present in the utils folder- STEP-8 Paste ssd_mobilenet_v1_coco or any other model downloaded from model zoo into research folder- Now cd to the research folder and run the following python file- python xml_to_csv.py STEP-9 Run the following to generate train and test records- from the research folder- python generate_tfrecord.py --csv_input=images/train_labels.csv --image_dir=images/train --output_path=train.record python generate_tfrecord.py --csv_input=images/test_labels.csv --image_dir=images/test --output_path=test.record STEP-10 Copy from research/object_detection/samples/config/ YOURMODEL.config file into research/training - Note The following config file shown here is with respect to ssd_mobilenet_v1_coco . So if you have downloaded it for any other model apart from SSD you'll see config file with YOUR_MODEL_NAME as shown below- model { YOUR_MODEL_NAME { num_classes: 6 box_coder { faster_rcnn_box_coder { Hence always verify YOUR_MODEL_NAME before using the config file. STEP-11 Update num_classes, fine_tune_checkpoint ,and num_steps plus update input_path and label_map_path for both train_input_reader and eval_input_reader - Info Changes to be made in the config file are highlighted in yellow color. You must update the value of those keys in the config file. Click here to see the full config fileite with Mobilenet v 1 configuration for MSCOCO Dataset. # Users should configure the fine_tune_checkpoint field in the train config as # well as the label_map_path and input_path fields in the train_input_reader and # eval_input_reader. Search for \"PATH_TO_BE_CONFIGURED\" to find the fields that # should be configured. model { ssd { num_classes: 6 box_coder { faster_rcnn_box_coder { y_scale: 10.0 x_scale: 10.0 height_scale: 5.0 width_scale: 5.0 } } matcher { argmax_matcher { matched_threshold: 0.5 unmatched_threshold: 0.5 ignore_thresholds: false negatives_lower_than_unmatched: true force_match_for_each_row: true } } similarity_calculator { iou_similarity { } } anchor_generator { ssd_anchor_generator { num_layers: 6 min_scale: 0.2 max_scale: 0.95 aspect_ratios: 1.0 aspect_ratios: 2.0 aspect_ratios: 0.5 aspect_ratios: 3.0 aspect_ratios: 0.3333 } } image_resizer { fixed_shape_resizer { height: 300 width: 300 } } box_predictor { convolutional_box_predictor { min_depth: 0 max_depth: 0 num_layers_before_predictor: 0 use_dropout: false dropout_keep_probability: 0.8 kernel_size: 3 use_depthwise: true box_code_size: 4 apply_sigmoid_to_scores: false conv_hyperparams { activation: RELU_6, regularizer { l2_regularizer { weight: 0.00004 } } initializer { truncated_normal_initializer { stddev: 0.03 mean: 0.0 } } batch_norm { train: true, scale: true, center: true, decay: 0.9997, epsilon: 0.001, } } } } feature_extractor { type: 'ssd_mobilenet_v1' min_depth: 16 depth_multiplier: 1.0 use_depthwise: true conv_hyperparams { activation: RELU_6, regularizer { l2_regularizer { weight: 0.00004 } } initializer { truncated_normal_initializer { stddev: 0.03 mean: 0.0 } } batch_norm { train: true, scale: true, center: true, decay: 0.9997, epsilon: 0.001, } } } loss { classification_loss { weighted_sigmoid { } } localization_loss { weighted_smooth_l1 { } } hard_example_miner { num_hard_examples: 3000 iou_threshold: 0.99 loss_type: CLASSIFICATION max_negatives_per_positive: 3 min_negatives_per_image: 0 } classification_weight: 1.0 localization_weight: 1.0 } normalize_loss_by_num_matches: true post_processing { batch_non_max_suppression { score_threshold: 1e-8 iou_threshold: 0.6 max_detections_per_class: 100 max_total_detections: 100 } score_converter: SIGMOID } } } train_config: { batch_size: 24 optimizer { rms_prop_optimizer: { learning_rate: { exponential_decay_learning_rate { initial_learning_rate: 0.004 decay_steps: 800720 decay_factor: 0.95 } } momentum_optimizer_value: 0.9 decay: 0.9 epsilon: 1.0 } } fine_tune_checkpoint: \"ssd_mobilenet_v1_coco_2018_01_28/model.ckpt\" from_detection_checkpoint: true # Note: The below line limits the training process to 200 K steps, which we # empirically found to be sufficient enough to train the pets dataset. This # effectively bypasses the learning rate schedule (the learning rate will # never decay). Remove the below line to train indefinitely. num_steps: 20000 data_augmentation_options { random_horizontal_flip { } } data_augmentation_options { ssd_random_crop { } } } train_input_reader: { tf_record_input_reader { input_path: \"train.record\" } label_map_path: \"training/labelmap.pbtxt\" } eval_config: { num_examples: 8000 # Note: The below line limits the evaluation process to 10 evaluations. # Remove the below line to evaluate indefinitely. max_evals: 10 } eval_input_reader: { tf_record_input_reader { input_path: \"test.record\" } label_map_path: \"training/labelmap.pbtxt\" shuffle: false num_readers: 1 } STEP-12 From research/object_detection/legacy/ copy train.py to research folder legacy folder contains train.py as shown below - STEP-13 Copy deployment and nets folder from research/slim into the research folder- slim folder contains the following folders - STEP-14 NOW Run the following command from the research folder. This will start the training in your local system- Note copy the command and replace YOUR_MODEL.config with your own model's name for example ssd_mobilenet_v1_coco.config python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/YOUR_MODEL.config Warning Always run all the commands in the research folder.","title":"Configuration steps for TensorFlow object detection-"},{"location":"#configuration-steps-for-tensorflow-object-detection-","text":"","title":"Configuration steps for TensorFlow object detection-"},{"location":"#step-1-download-the-following-content-","text":"Download v1.13.0 model. Download the ssd_mobilenet_v1_coco model from the model zoo or any other model of your choice from TensorFlow model zoo. Download Dataset & utils. Download labelImg tool for labeling images. before extraction, you should have the following compressed files -","title":"STEP-1 Download the following content-"},{"location":"#step-2-extract-all-the-above-zip-files-into-a-tfod-folder-and-remove-the-compressed-files-","text":"Now you should have the following folders -","title":"STEP-2 Extract all the above zip files into a tfod folder and remove the compressed files-"},{"location":"#step-3-creating-virtual-env-using-conda-","text":"Commands for specific python version conda create -n your_env_name python=3.6 for latest python version conda activate your_env_name","title":"STEP-3 Creating virtual env using\u00a0conda-"},{"location":"#step-4-install-the-following-packages-in-your-new-environment-","text":"","title":"STEP-4 Install the following packages in your new environment-"},{"location":"#for-gpu","text":"pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow-gpu==1.14.0","title":"for GPU"},{"location":"#for-cpu-only","text":"pip install pillow lxml Cython contextlib2 jupyter matplotlib pandas opencv-python tensorflow==1.14.0","title":"for CPU only"},{"location":"#step-5-install-protobuf-using-conda-package-manager-","text":"conda install -c anaconda protobuf","title":"STEP-5 Install protobuf using conda package manager-"},{"location":"#step-6-for-protobuff-to-py-conversion-download-from-a-tool-from-here-","text":"For windows -> download source for other versions and OS - click here Open command prompt and cd to research folder. Now in the research folder run the following command-","title":"STEP-6 For protobuff to\u00a0.py conversion download from a tool from here-"},{"location":"#for-linux-or-mac","text":"protoc object_detection/protos/*.proto --python_out=.","title":"For Linux or Mac"},{"location":"#for-windows","text":"protoc object_detection/protos/*.proto --python_out=.","title":"For Windows"},{"location":"#step-7-paste-all-content-present-in-utils-into-research-folder-","text":"Following are the files and folder present in the utils folder-","title":"STEP-7 Paste all content present in utils into research folder-"},{"location":"#step-8-paste-ssd_mobilenet_v1_coco-or-any-other-model-downloaded-from-model-zoo-into-research-folder-","text":"Now cd to the research folder and run the following python file- python xml_to_csv.py","title":"STEP-8 Paste ssd_mobilenet_v1_coco or any other model downloaded from model zoo into research folder-"},{"location":"#step-9-run-the-following-to-generate-train-and-test-records-","text":"from the research folder- python generate_tfrecord.py --csv_input=images/train_labels.csv --image_dir=images/train --output_path=train.record python generate_tfrecord.py --csv_input=images/test_labels.csv --image_dir=images/test --output_path=test.record","title":"STEP-9 Run the following to generate train and test records-"},{"location":"#step-10-copy-from-researchobject_detectionsamplesconfig-yourmodelconfig-file-into-researchtraining-","text":"Note The following config file shown here is with respect to ssd_mobilenet_v1_coco . So if you have downloaded it for any other model apart from SSD you'll see config file with YOUR_MODEL_NAME as shown below- model { YOUR_MODEL_NAME { num_classes: 6 box_coder { faster_rcnn_box_coder { Hence always verify YOUR_MODEL_NAME before using the config file.","title":"STEP-10 Copy from research/object_detection/samples/config/ YOURMODEL.config file into research/training-"},{"location":"#step-11-update-num_classes-fine_tune_checkpoint-and-num_steps-plus-update-input_path-and-label_map_path-for-both-train_input_reader-and-eval_input_reader-","text":"Info Changes to be made in the config file are highlighted in yellow color. You must update the value of those keys in the config file. Click here to see the full config fileite with Mobilenet v 1 configuration for MSCOCO Dataset. # Users should configure the fine_tune_checkpoint field in the train config as # well as the label_map_path and input_path fields in the train_input_reader and # eval_input_reader. Search for \"PATH_TO_BE_CONFIGURED\" to find the fields that # should be configured. model { ssd { num_classes: 6 box_coder { faster_rcnn_box_coder { y_scale: 10.0 x_scale: 10.0 height_scale: 5.0 width_scale: 5.0 } } matcher { argmax_matcher { matched_threshold: 0.5 unmatched_threshold: 0.5 ignore_thresholds: false negatives_lower_than_unmatched: true force_match_for_each_row: true } } similarity_calculator { iou_similarity { } } anchor_generator { ssd_anchor_generator { num_layers: 6 min_scale: 0.2 max_scale: 0.95 aspect_ratios: 1.0 aspect_ratios: 2.0 aspect_ratios: 0.5 aspect_ratios: 3.0 aspect_ratios: 0.3333 } } image_resizer { fixed_shape_resizer { height: 300 width: 300 } } box_predictor { convolutional_box_predictor { min_depth: 0 max_depth: 0 num_layers_before_predictor: 0 use_dropout: false dropout_keep_probability: 0.8 kernel_size: 3 use_depthwise: true box_code_size: 4 apply_sigmoid_to_scores: false conv_hyperparams { activation: RELU_6, regularizer { l2_regularizer { weight: 0.00004 } } initializer { truncated_normal_initializer { stddev: 0.03 mean: 0.0 } } batch_norm { train: true, scale: true, center: true, decay: 0.9997, epsilon: 0.001, } } } } feature_extractor { type: 'ssd_mobilenet_v1' min_depth: 16 depth_multiplier: 1.0 use_depthwise: true conv_hyperparams { activation: RELU_6, regularizer { l2_regularizer { weight: 0.00004 } } initializer { truncated_normal_initializer { stddev: 0.03 mean: 0.0 } } batch_norm { train: true, scale: true, center: true, decay: 0.9997, epsilon: 0.001, } } } loss { classification_loss { weighted_sigmoid { } } localization_loss { weighted_smooth_l1 { } } hard_example_miner { num_hard_examples: 3000 iou_threshold: 0.99 loss_type: CLASSIFICATION max_negatives_per_positive: 3 min_negatives_per_image: 0 } classification_weight: 1.0 localization_weight: 1.0 } normalize_loss_by_num_matches: true post_processing { batch_non_max_suppression { score_threshold: 1e-8 iou_threshold: 0.6 max_detections_per_class: 100 max_total_detections: 100 } score_converter: SIGMOID } } } train_config: { batch_size: 24 optimizer { rms_prop_optimizer: { learning_rate: { exponential_decay_learning_rate { initial_learning_rate: 0.004 decay_steps: 800720 decay_factor: 0.95 } } momentum_optimizer_value: 0.9 decay: 0.9 epsilon: 1.0 } } fine_tune_checkpoint: \"ssd_mobilenet_v1_coco_2018_01_28/model.ckpt\" from_detection_checkpoint: true # Note: The below line limits the training process to 200 K steps, which we # empirically found to be sufficient enough to train the pets dataset. This # effectively bypasses the learning rate schedule (the learning rate will # never decay). Remove the below line to train indefinitely. num_steps: 20000 data_augmentation_options { random_horizontal_flip { } } data_augmentation_options { ssd_random_crop { } } } train_input_reader: { tf_record_input_reader { input_path: \"train.record\" } label_map_path: \"training/labelmap.pbtxt\" } eval_config: { num_examples: 8000 # Note: The below line limits the evaluation process to 10 evaluations. # Remove the below line to evaluate indefinitely. max_evals: 10 } eval_input_reader: { tf_record_input_reader { input_path: \"test.record\" } label_map_path: \"training/labelmap.pbtxt\" shuffle: false num_readers: 1 }","title":"STEP-11 Update num_classes, fine_tune_checkpoint ,and num_steps plus update input_path and label_map_path for both train_input_reader and eval_input_reader-"},{"location":"#step-12-from-researchobject_detectionlegacy-copy-trainpy-to-research-folder","text":"legacy folder contains train.py as shown below -","title":"STEP-12 From research/object_detection/legacy/ copy train.py to research folder"},{"location":"#step-13-copy-deployment-and-nets-folder-from-researchslim-into-the-research-folder-","text":"slim folder contains the following folders -","title":"STEP-13 Copy deployment and nets folder from research/slim into the research\u00a0folder-"},{"location":"#step-14-now-run-the-following-command-from-the-research-folder-this-will-start-the-training-in-your-local-system-","text":"Note copy the command and replace YOUR_MODEL.config with your own model's name for example ssd_mobilenet_v1_coco.config python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/YOUR_MODEL.config Warning Always run all the commands in the research folder.","title":"STEP-14 NOW Run the following command from the research folder. This will start the training in your local\u00a0system-"},{"location":"p02/","text":"Google Colab setup for tfod Steps to start training in Google Colab for tfod- STEP 1. Do all the necessary steps shown on the previous page in your local system except the last step where training starts- Note I mean do everything before the following step- python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssdlite_mobilenet_v1_coco.config STEP 2.Move whole tfod folder to your google drive. verify that it should have atleast the below content- Note I'm using the ssd_mobilenet_v1_coco model that's I have ssd_mobilenet_v1_coco folder in the screenshot. You can upload your choice of the model there. Tip Since you have already done tfod set up in your local system and already copied utils and your model zoo folder (i.e ssd_mobilenet_v1_coco in my case). So if you want then you can only upload models-1.13.0 , folder instead of all of them. Here I have uploaded all of them just to replicate the exact same steps in local and Google Colab. STEP 3. Open a jupyter notebook in the root of your folder structure. I mean just inside the tfod folder. As you can see in the below screenshot you can see t01.ipynb . STEP 4. Mount the drive in Colab and initialize it with GPU. Refer the following video - STEP 5. In the first cell run the following command so that it selects TensorFlow 1 for the training- %tensorflow_version 1.x STEP 6. In the notebook import os. And set a path to the research directory in a Variable as per your google drive. import os RESEARCH_DIR = \"/content/drive/My Drive/PATH_TO_TFOD/tfod/models-1.13.0/research\" STEP 7. Run the following line to change the directory- os . chdir ( RESEARCH_DIR ) STEP 8. Run the following line to verify that you are in the research folder- os . getcwd () STEP 9. Now run the training command to start the training in Google Colab- Note Change the name of the config file as per your model name !python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssdlite_mobilenet_v1_coco.config STEP 10. Copy and paste following code in your browser console to prevent Google Colab from terminating- JS code 1 - function ClickConnect (){ console . log ( \"Working\" ); document . querySelector ( \"colab-toolbar-button\" ). click () } setInterval ( ClickConnect , 60000 ) Refer the video below for final setup - Screenshot of Google Colab code- Screenshot of begining of final training- \"How to prevent Google Colab from disconnecting ?\" | MEDIUM BLOG \u21a9","title":"Google Colab setup for\u00a0tfod"},{"location":"p02/#google-colab-setup-for-tfod","text":"Steps to start training in Google Colab for tfod-","title":"Google Colab setup for\u00a0tfod"},{"location":"p02/#step-1-do-all-the-necessary-steps-shown-on-the-previous-page-in-your-local-system-except-the-last-step-where-training-starts-","text":"Note I mean do everything before the following step- python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssdlite_mobilenet_v1_coco.config","title":"STEP 1. Do all the necessary steps shown on the previous page in your local system except the last step where training\u00a0starts-"},{"location":"p02/#step-2move-whole-tfod-folder-to-your-google-drive","text":"verify that it should have atleast the below content- Note I'm using the ssd_mobilenet_v1_coco model that's I have ssd_mobilenet_v1_coco folder in the screenshot. You can upload your choice of the model there. Tip Since you have already done tfod set up in your local system and already copied utils and your model zoo folder (i.e ssd_mobilenet_v1_coco in my case). So if you want then you can only upload models-1.13.0 , folder instead of all of them. Here I have uploaded all of them just to replicate the exact same steps in local and Google Colab.","title":"STEP 2.Move whole tfod folder to your google drive."},{"location":"p02/#step-3-open-a-jupyter-notebook-in-the-root-of-your-folder-structure-i-mean-just-inside-the-tfod-folder","text":"As you can see in the below screenshot you can see t01.ipynb .","title":"STEP 3. Open a jupyter notebook in the root of your folder structure. I mean just inside the tfod folder."},{"location":"p02/#step-4-mount-the-drive-in-colab-and-initialize-it-with-gpu","text":"","title":"STEP 4. Mount the drive in Colab and initialize it with GPU."},{"location":"p02/#refer-the-following-video-","text":"","title":"Refer the following video -"},{"location":"p02/#step-5-in-the-first-cell-run-the-following-command-so-that-it-selects-tensorflow-1-for-the-training-","text":"%tensorflow_version 1.x","title":"STEP 5. In the first cell run the following command so that it selects TensorFlow 1 for the training-"},{"location":"p02/#step-6-in-the-notebook-import-os-and-set-a-path-to-the-research-directory-in-a-variable-as-per-your-google-drive","text":"import os RESEARCH_DIR = \"/content/drive/My Drive/PATH_TO_TFOD/tfod/models-1.13.0/research\"","title":"STEP 6. In the notebook import os. And set a path to the research directory in a Variable as per your google drive."},{"location":"p02/#step-7-run-the-following-line-to-change-the-directory-","text":"os . chdir ( RESEARCH_DIR )","title":"STEP 7. Run the following line to change the directory-"},{"location":"p02/#step-8-run-the-following-line-to-verify-that-you-are-in-the-research-folder-","text":"os . getcwd ()","title":"STEP 8. Run the following line to verify that you are in the research folder-"},{"location":"p02/#step-9-now-run-the-training-command-to-start-the-training-in-google-colab-","text":"Note Change the name of the config file as per your model name !python train.py --logtostderr --train_dir=training/ --pipeline_config_path=training/ssdlite_mobilenet_v1_coco.config","title":"STEP 9. Now run the training command to start the training in Google\u00a0Colab-"},{"location":"p02/#step-10-copy-and-paste-following-code-in-your-browser-console-to-prevent-google-colab-from-terminating-","text":"JS code 1 - function ClickConnect (){ console . log ( \"Working\" ); document . querySelector ( \"colab-toolbar-button\" ). click () } setInterval ( ClickConnect , 60000 ) Refer the video below for final setup -","title":"STEP 10. Copy and paste following code in your browser console to prevent  Google\u00a0Colab from terminating-"},{"location":"p02/#screenshot-of-google-colab-code-","text":"","title":"Screenshot of Google Colab\u00a0code-"},{"location":"p02/#screenshot-of-begining-of-final-training-","text":"\"How to prevent Google Colab from disconnecting ?\" | MEDIUM BLOG \u21a9","title":"Screenshot of begining of final training-"},{"location":"referencesAndFeedback/","text":"References iNeuron docs TensorFlow Object Detection API | tutorial TensorFlow Object Detection | GitHub \"How to prevent Google Colab from disconnecting ?\" | MEDIUM BLOG \"Getting Local with Google Colab\" | MEDIUM BLOG For any Feedback - Feedback Hi fellow Devs, I've tried my best to make this documentation as good as possible and also I've mentioned almost all the references that I've refered. Apart from that if you wish to give some constructive feedback then please mail me at - sunny.c17hawke@gmail.com Thanks and Regards, Sunny Bhaveen Chandra","title":"References"},{"location":"referencesAndFeedback/#references","text":"iNeuron docs TensorFlow Object Detection API | tutorial TensorFlow Object Detection | GitHub \"How to prevent Google Colab from disconnecting ?\" | MEDIUM BLOG \"Getting Local with Google Colab\" | MEDIUM BLOG","title":"References"},{"location":"referencesAndFeedback/#for-any-feedback-","text":"Feedback Hi fellow Devs, I've tried my best to make this documentation as good as possible and also I've mentioned almost all the references that I've refered. Apart from that if you wish to give some constructive feedback then please mail me at - sunny.c17hawke@gmail.com Thanks and Regards, Sunny Bhaveen Chandra","title":"For any Feedback -"}]}